apply plugin: 'java-library'
apply plugin: "kotlin"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

task createMovieJson(type:JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.ruzhan.jsonfile.CreateJsonMain"
}

task updateMovieJson() {
    dependsOn("createMovieJson")
    doLast {
        exeDayJsonGitCmd()
    }
}

void exeDayJsonGitCmd() {
    String currentTimeText = getCurrentTimeText()
    println("exeDayJsonGitCmd called...  currentTimeText: " + currentTimeText)
    exeDayJsonGitAdd()
    exeDayJsonGitCommit(currentTimeText)
    exeDayJsonGitFetch()
    exeDayJsonGitRebaseMaster()
    exeDayJsonGitPushMaster()
}

void exeDayJsonGitFetch() {
    println("exeDayJsonGitFetch called...")
    exec {
        workingDir '../'
        commandLine 'git', 'fetch', 'origin'
    }
}

void exeDayJsonGitRebaseMaster() {
    println("exeDayJsonGitRebaseMaster called...")
    exec {
        workingDir '../'
        commandLine 'git', 'rebase', 'origin/master'
    }
}

void exeDayJsonGitAdd() {
    println("exeDayJsonGitAdd called...")
    exec {
        workingDir '../'
        commandLine 'git', 'add', '.'
    }
}

private static String getRandomCommitText() {
    String url = "http://whatthecommit.com/index.txt"
    def client = new okhttp3.OkHttpClient()
    def request = new okhttp3.Request.Builder().url(url).build()
    def response = client.newCall(request).execute()
    String commitText = response.body().string()
    response.close()
    return commitText
}

void exeDayJsonGitCommit(String currentTimeText) {
    println("exeDayJsonGitCommit called...")
    String commitContent = getRandomCommitText()
    println("currentTimeText:" + currentTimeText)
    println("commitContent:" + commitContent)
    exec {
        workingDir '../'
        commandLine 'git', 'commit', '-m', '' + commitContent
    }
}

void exeDayJsonGitPushMaster() {
    println("exeDayJsonGitPushMaster called...")
    exec {
        workingDir '../'
        commandLine 'git', 'push', 'origin', 'master:master'
    }
}

private static def getCurrentTimeText() {
    String currentTimeText = new Date().format("yyyy-MM-dd hh:mm:ss",
            TimeZone.getTimeZone("GMT+08:00"))
    return currentTimeText != null ? currentTimeText : ""
}

buildscript {
    ext.kotlin_version = '1.3.60'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

String mediaName = ""

task ffmpegCommendSet() {
    if (!mediaName.isBlank()) {
        createMediaNameDir(mediaName)
        transformToMp4(mediaName)
        transformToTs(mediaName)
        transformToTsM3U8(mediaName)
    }
}

void transformToMp4(String mediaName) {
    println("transformToMp4 called...")
    exec {
        workingDir '../movie-source/'
        commandLine 'ffmpeg', '-i', '' + mediaName + ".flv", '-acodec', 'copy', '' + mediaName + ".mp4"
    }
}

void transformToTs(String mediaName) {
    println("transformToTs called...")
    exec {
        workingDir '../movie-source/'
        commandLine 'ffmpeg', '-i', '' + mediaName + ".mp4", '-c', 'copy',
                '-bsf:v', 'h264_mp4toannexb', '-f', 'mpegts', '' + mediaName + ".ts"
    }
}

void transformToTsM3U8(String mediaName) {
    println("transformToTsM3U8 called...")
    exec {
        workingDir '../movie-source/'
        commandLine 'ffmpeg', '-i', '' + mediaName + ".ts", '-c', 'copy',
                '-map', '0', '-f', 'segment', '-segment_list', 'playlist.m3u8',
                '-segment_time', '10', '' + mediaName + "%03d.ts"
    }
}

File createMediaNameDir(String mediaName) {
    println("createMediaNameDir called...")
    File dirFile = new File(System.getProperty("user.dir"))
    File userDirFile = dirFile.absolutePath.contains("createJson") ?
            dirFile.parentFile : dirFile
    println("userDirFile:${userDirFile.absolutePath}")
    File movieSourceFile = new File(userDirFile, "movie-source")
    println("movieSourceFile:${movieSourceFile.absolutePath}")
    File mediaFile = new File(movieSourceFile, mediaName)
    if (!mediaFile.exists()) {
        mediaFile.mkdirs()
    }
    String mediaDir = mediaFile.absolutePath
    println("mediaFile:${mediaDir}")
    return mediaFile
}